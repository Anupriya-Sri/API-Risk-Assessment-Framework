# Current available fields:

## api_endpoint_id:
The unique identifier for the API endpoint.

Type: numeric
## api_id:
The ID of the API.

Type: numeric

## api_vendor_id:
The ID of the API vendor.

Type: numeric

## api_vendor
The vendor of the API, e.g "OneLook", "Victoria State Government Australia", "TeejLab"...

Type: string

## api:
The name of the API, e.g "Datamuse Dictionary", "DepartmentAPI"...

Type: string

## category
The category of the API, e.g "Research & Education", "AI & Data Science"...

Type: string

## usage_base:
Free or commercial API. 
- Free: there are free limits, such as the number of calls that can be made for free. These limits are also available to hackers.
- Commercial: need registration. Additional layer of security

Type: string

## sample_response:
A sample response from the API.
- "None": not safe at all
- "Path": risky
- "others not listed": okay
- "OAuth": strongest
- 
Type: String

## tagset:
List of keys in the sample response.

Type: list

## authentication:
Authentication method, e.g "None", "OAuth 2.0", "Basic Authentication"...

The risk level can be found here: <https://owasp.org/www-project-api-security/>

Type: string

## security_test_category:
The category of the security test, e.g Broken Authentication', 'Cross-Site Scripting', 'Insecure Deserialization', 'SQL Injection','XML External Entities', 'Buffer Overflow'....
Type: string

## security_test_result:
The result of the security test, e.g (FALSE=Passed; TRUE=Failed)
Type: boolean

## server_location:
The location of the API, e.g "Australia", "United States"...
Type: string

## hosting_isp:
The hosting ISP of the API, e.g "Amazon", "Cloudflare", "Google"...
Type: string

## server_name:
The server running the API, e.g "Apache/2.4.33", "Microsoft-IIS/8.5"...
Type: string

## hosting city:
The city hosting the API, e.g "Melbourne", "New York"...
Type: string

## response_metadata:
The response metadata of the API, e.g "X-Powered-By: PHP/5.6.31"...
Type: string

## risk_label:
The risk label of the API, e.g "Low", "Medium", "High"...
Type: string

# Additional Suggested fields:
## KSI:
Known security issues of the API, e.g "XSS", "SQL Injection", "CSRF", "Insecure CORS"
## PII: 
Personally Identifiable Information; Any representation of information that permits the identity of an individual to whom the information applies to be reasonably inferred by either direct or indirect means.
## FII:
Financial Information: Any representation of information that is reasonably considered to be financial in nature, such as a bank account number, credit card number, or other financial information.

## How many parameters sent: (Exploit Surface)
The number of parameters sent in the API, e.g "5"

# Response Metadata:

## status:
The status of the API, e.g "200", "404"...

## content_type:
The content type of the API, e.g "application/json", "text/html"...

## content_length:
The content length of the API, e.g "10", "100"...

## x-powered-by:
The x-powered-by of the API, e.g "PHP/5.6.31", "Microsoft-IIS/8.5"...

## access-control-allow-origin:
The access-control-allow-origin of the API, e.g "*", "https://www.victoriatax.gov.au"...

## access-control-allow-methods:
The access-control-allow-methods of the API, e.g "GET, POST, PUT, DELETE"...

## access-control-allow-headers: 
The access-control-allow-headers of the API, e.g "Content-Type, Accept, Authorization"...

## access-control-max-age:
The access-control-max-age of the API, e.g "3600"...

# Security Category:

## Broken Authentication:
Broken authentication attacks aim to take over one or more accounts giving the attacker the same privileges as the attacked user.

## Cross-Site Scripting:
Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted websites.

## Insecure Deserialization:
Insecure deserialization is when user-controllable data is deserialized by a website. This potentially enables an attacker to manipulate serialized objects in order to pass harmful data into the application code.

## SQL Injection:
A SQL injection attack consists of insertion or “injection” of a SQL query via the input data from the client to the application

## XML External Entities:
XML external entities are a type of custom XML entity whose defined values are loaded from outside of the DTD in which they are declared.

## Buffer Overflow:
A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold or when a program attempts to put data in a memory area past a buffer

